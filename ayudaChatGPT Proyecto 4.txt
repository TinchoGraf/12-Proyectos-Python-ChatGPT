Ah, perfecto üòÑ ‚Äî ¬°gracias por aclararlo!
Entonces te refer√≠s al **Proyecto 4: Agenda de contactos con JSON**, el siguiente paso en tu *roadmap de 12 proyectos Python*.

Te explico en detalle **qu√© se espera de ese proyecto**, **qu√© conceptos vas a practicar**, **c√≥mo estructurarlo paso a paso** y **qu√© variantes pod√©s hacer para mejorarlo** üëá

---

# üìí PROYECTO 4 ‚Äî ‚ÄúAgenda de Contactos con JSON‚Äù

---

## üéØ **Objetivo general**

Crear una aplicaci√≥n de **consola** que funcione como una **agenda electr√≥nica b√°sica**, permitiendo al usuario:

1. **Agregar contactos nuevos** (nombre, tel√©fono, email, etc.)
2. **Buscar contactos existentes**
3. **Eliminar contactos**
4. **Listar todos los contactos**
5. **Guardar y recuperar los datos autom√°ticamente** usando un **archivo JSON** (en lugar de texto plano como en el proyecto anterior)

---

## üß© **Conceptos que se eval√∫an / se espera que practiques**

| Concepto                    | Qu√© demuestra                                                                                          |
| --------------------------- | ------------------------------------------------------------------------------------------------------ |
| **Diccionarios**            | Representar contactos como pares clave-valor (por ejemplo, `{ "nombre": "Juan", "telefono": "1234" }`) |
| **Listas de diccionarios**  | Almacenar todos los contactos dentro de una lista (por ejemplo, `contactos = [ {...}, {...} ]`)        |
| **Manejo de archivos JSON** | Usar `json.dump()` y `json.load()` para guardar y leer datos estructurados                             |
| **Funciones**               | Organizar el programa modularmente: agregar, buscar, listar, eliminar, guardar                         |
| **Control de errores**      | Manejar archivos inexistentes, entradas vac√≠as, duplicados, etc.                                       |
| **Men√∫ interactivo**        | Repetir opciones hasta que el usuario elija salir                                                      |

---

## üß† **Qu√© habilidades nuevas incorpora respecto al Proyecto 3**

| Proyecto 3                                        | Proyecto 4                                                       |
| ------------------------------------------------- | ---------------------------------------------------------------- |
| Guarda texto plano l√≠nea por l√≠nea                | Guarda **datos estructurados (JSON)**                            |
| Solo manipula strings                             | Manipula **diccionarios y listas anidadas**                      |
| Usa un archivo por lista (pendientes/completadas) | Usa **un √∫nico archivo JSON** con toda la agenda                 |
| Flujo lineal simple                               | Comienza a manejar **datos m√°s complejos (m√∫ltiples atributos)** |
| Consola sin validaciones avanzadas                | Introduce validaciones de campos (ej. email, duplicados, etc.)   |

---

## üß± **Estructura l√≥gica paso a paso**

---

### ü•á Paso 1 ‚Äî Importar m√≥dulo JSON y preparar las estructuras

```python
import json

ARCHIVO = "agenda.json"

def cargar_contactos():
    try:
        with open(ARCHIVO, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
```

üëâ **Objetivo:** si el archivo no existe, arrancar con una lista vac√≠a.

---

### ü•à Paso 2 ‚Äî Guardar contactos

```python
def guardar_contactos(contactos):
    with open(ARCHIVO, "w") as f:
        json.dump(contactos, f, indent=4)
```

üí° `indent=4` guarda el archivo con formato legible.

---

### ü•â Paso 3 ‚Äî Agregar contacto

```python
def agregar_contacto(contactos):
    nombre = input("Nombre: ").strip()
    telefono = input("Tel√©fono: ").strip()
    email = input("Email: ").strip()

    nuevo = {"nombre": nombre, "telefono": telefono, "email": email}
    contactos.append(nuevo)
    print(f"Contacto '{nombre}' agregado correctamente.")
```

---

### üèóÔ∏è Paso 4 ‚Äî Buscar contacto

```python
def buscar_contacto(contactos):
    criterio = input("Ingrese el nombre o parte del nombre a buscar: ").lower()
    resultados = [c for c in contactos if criterio in c["nombre"].lower()]

    if resultados:
        for c in resultados:
            print(f"- {c['nombre']} ({c['telefono']}, {c['email']})")
    else:
        print("No se encontraron contactos.")
```

---

### üß© Paso 5 ‚Äî Eliminar contacto

```python
def eliminar_contacto(contactos):
    nombre = input("Ingrese el nombre exacto del contacto a eliminar: ").strip()
    for c in contactos:
        if c["nombre"].lower() == nombre.lower():
            contactos.remove(c)
            print(f"Contacto '{nombre}' eliminado.")
            return
    print("No se encontr√≥ el contacto.")
```

---

### üß± Paso 6 ‚Äî Mostrar todos los contactos

```python
def listar_contactos(contactos):
    if not contactos:
        print("No hay contactos guardados.")
        return
    for i, c in enumerate(contactos, 1):
        print(f"{i}. {c['nombre']} - {c['telefono']} - {c['email']}")
```

---

### üèÅ Paso 7 ‚Äî Men√∫ principal

```python
def main():
    contactos = cargar_contactos()

    while True:
        print("\n--- AGENDA DE CONTACTOS ---")
        print("1. Agregar contacto")
        print("2. Buscar contacto")
        print("3. Eliminar contacto")
        print("4. Listar contactos")
        print("5. Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            agregar_contacto(contactos)
        elif opcion == "2":
            buscar_contacto(contactos)
        elif opcion == "3":
            eliminar_contacto(contactos)
        elif opcion == "4":
            listar_contactos(contactos)
        elif opcion == "5":
            guardar_contactos(contactos)
            print("Agenda guardada. Hasta luego!")
            break
        else:
            print("Opci√≥n inv√°lida.")
```

Y al final:

```python
if __name__ == "__main__":
    main()
```

---

## üìÇ **Ejemplo de archivo JSON generado**

```json
[
    {
        "nombre": "Juan P√©rez",
        "telefono": "123456789",
        "email": "juan@gmail.com"
    },
    {
        "nombre": "Ana Torres",
        "telefono": "987654321",
        "email": "ana.torres@hotmail.com"
    }
]
```

---

## üåü **Extras opcionales (para destacar tu versi√≥n en GitHub)**

1. **Validar emails** con una expresi√≥n regular (`re.match`).
2. **Evitar duplicados** (no permitir dos contactos con el mismo nombre).
3. **Permitir editar contactos existentes.**
4. **Buscar por tel√©fono o email, no solo por nombre.**
5. **Exportar a CSV** adem√°s de JSON.
6. **Agregar color al texto** (con `colorama`) o limpiar pantalla (`os.system("cls")` / `clear`).

---

## üìä **Qu√© se eval√∫a**

| Criterio                 | Ponderaci√≥n | Descripci√≥n                                            |
| ------------------------ | ----------- | ------------------------------------------------------ |
| L√≥gica general           | 25%         | El programa funciona sin errores, sigue un flujo claro |
| Modularizaci√≥n           | 20%         | Usa funciones para tareas espec√≠ficas                  |
| Estructuras de datos     | 20%         | Usa listas y diccionarios correctamente                |
| Manejo de archivos JSON  | 20%         | Carga y guarda datos persistentes                      |
| Claridad y documentaci√≥n | 15%         | C√≥digo legible, mensajes claros, README explicativo    |

---

¬øQuer√©s que te arme una **plantilla base (esqueleto del c√≥digo)** con las funciones vac√≠as, para que solo completes la l√≥gica?
As√≠ podr√≠as enfocarte m√°s en pensar el flujo sin perderte en detalles sint√°cticos.
